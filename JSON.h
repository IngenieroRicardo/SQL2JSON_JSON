/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "JSON.go"

#include <stdlib.h>
#include <string.h>

typedef struct {
    char* value;
    int is_valid;
    char* error;
} JsonResult;

typedef struct {
    char** items;
    int count;
    int is_valid;
    char* error;
} JsonArrayResult;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

#ifdef _WIN32 
extern __declspec(dllexport) JsonResult ParseJSON(char* jsonStr);
extern __declspec(dllexport) JsonResult GetJSONValue(char* jsonStr, char* key);
extern __declspec(dllexport) JsonResult GetArrayLength(char* jsonStr);
extern __declspec(dllexport) JsonResult GetArrayItem(char* jsonStr, GoInt index);
extern __declspec(dllexport) void FreeJsonResult(JsonResult* result);
extern __declspec(dllexport) JsonArrayResult GetJSONKeys(char* jsonStr);
extern __declspec(dllexport) void FreeJsonArrayResult(JsonArrayResult* result);
extern __declspec(dllexport) JsonResult GetJSONValueByPath(char* jsonStr, char* path);
extern __declspec(dllexport) JsonArrayResult GetArrayItems(char* jsonStr);
extern __declspec(dllexport) JsonResult CreateEmptyJSON();
extern __declspec(dllexport) JsonResult CreateEmptyArray();
extern __declspec(dllexport) JsonResult AddStringToJSON(char* jsonStr, char* key, char* value);
extern __declspec(dllexport) JsonResult AddNumberToJSON(char* jsonStr, char* key, GoFloat64 value);
extern __declspec(dllexport) JsonResult AddBooleanToJSON(char* jsonStr, char* key, int value);
extern __declspec(dllexport) JsonResult AddJSONToJSON(char* parentJson, char* key, char* childJson);
extern __declspec(dllexport) JsonResult AddItemToArray(char* jsonArray, char* item);
extern __declspec(dllexport) JsonResult RemoveKeyFromJSON(char* jsonStr, char* key);
extern __declspec(dllexport) JsonResult RemoveItemFromArray(char* jsonArray, int index);
extern __declspec(dllexport) JsonResult PrettyPrintJSON(char* jsonStr);
extern __declspec(dllexport) JsonResult MergeJSON(char* json1, char* json2);
extern __declspec(dllexport) int IsValidJSON(char* jsonStr);
#else 
extern JsonResult ParseJSON(char* jsonStr);
extern JsonResult GetJSONValue(char* jsonStr, char* key);
extern JsonResult GetArrayLength(char* jsonStr);
extern JsonResult GetArrayItem(char* jsonStr, GoInt index);
extern void FreeJsonResult(JsonResult* result);
extern JsonArrayResult GetJSONKeys(char* jsonStr);
extern void FreeJsonArrayResult(JsonArrayResult* result);
extern JsonResult GetJSONValueByPath(char* jsonStr, char* path);
extern JsonArrayResult GetArrayItems(char* jsonStr);
extern JsonResult CreateEmptyJSON();
extern JsonResult CreateEmptyArray();
extern JsonResult AddStringToJSON(char* jsonStr, char* key, char* value);
extern JsonResult AddNumberToJSON(char* jsonStr, char* key, GoFloat64 value);
extern JsonResult AddBooleanToJSON(char* jsonStr, char* key, int value);
extern JsonResult AddJSONToJSON(char* parentJson, char* key, char* childJson);
extern JsonResult AddItemToArray(char* jsonArray, char* item);
extern JsonResult RemoveKeyFromJSON(char* jsonStr, char* key);
extern JsonResult RemoveItemFromArray(char* jsonArray, int index);
extern JsonResult PrettyPrintJSON(char* jsonStr);
extern JsonResult MergeJSON(char* json1, char* json2);
extern int IsValidJSON(char* jsonStr);
#endif 

#ifdef __cplusplus
}
#endif
